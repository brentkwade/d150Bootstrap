var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var WebServer = /** @class */ (function (_super) {
    __extends(WebServer, _super);
    function WebServer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebServer.prototype.start = function (port) { return cordova(this, "start", { "callbackOrder": "reverse" }, arguments); };
    WebServer.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    WebServer.prototype.onRequest = function () { return cordova(this, "onRequest", { "callbackOrder": "reverse", "observable": true, "clearFunction": "stop" }, arguments); };
    WebServer.prototype.sendResponse = function (requestId, responseObject) { return cordova(this, "sendResponse", {}, arguments); };
    WebServer.pluginName = "WebServer";
    WebServer.plugin = "cordova-plugin-webserver";
    WebServer.pluginRef = "window.webserver";
    WebServer.repo = "https://github.com/bykof/cordova-plugin-webserver.git";
    WebServer.platforms = ["Android", "iOS"];
    WebServer = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], WebServer);
    return WebServer;
}(IonicNativePlugin));
export { WebServer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3dlYi1zZXJ2ZXIvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUFnRUgsNkJBQWlCOzs7O0lBUzlDLHlCQUFLLGFBQUMsSUFBYTtJQVFuQix3QkFBSTtJQWFKLDZCQUFTO0lBV1QsZ0NBQVksYUFBQyxTQUFpQixFQUFFLGNBQXdCOzs7Ozs7SUF6QzdDLFNBQVM7UUFIckIsVUFBVSxDQUFDO1lBQ1YsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQztPQUNXLFNBQVM7b0JBbEV0QjtFQWtFK0IsaUJBQWlCO1NBQW5DLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZSB7XG4gIHN0YXR1czogbnVtYmVyO1xuICBib2R5OiBzdHJpbmc7XG4gIGhlYWRlcnM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXF1ZXN0IHtcbiAgcmVxdWVzdElkOiBzdHJpbmc7XG4gIGJvZHk6IHN0cmluZztcbiAgaGVhZGVyczogc3RyaW5nO1xuICBtZXRob2Q6ICdQT1NUJyB8ICdHRVQnIHwgJ1BVVCcgfCAnUEFUQ0gnIHwgJ0RFTEVURSc7XG4gIHBhdGg6IHN0cmluZztcbiAgcXVlcnk6IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmFtZSBXZWIgU2VydmVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGFsbG93cyB5b3UgdG8gc3RhcnQgYSBsb2NhbCBkeW5hbWljIGNvbnRlbnQgd2ViIHNlcnZlciBmb3IgYW5kcm9pZCBhbmQgaU9TIGRldmljZXMuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBXZWJTZXJ2ZXIgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3dlYi1zZXJ2ZXIvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSB3ZWJTZXJ2ZXI6IFdlYlNlcnZlcikgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy53ZWJTZXJ2ZXIub25SZXF1ZXN0KCkuc3Vic2NyaWJlKGRhdGEgPT4ge1xuICogICBjb25zb2xlLmxvZyhkYXRhKTtcbiAqICAgY29uc3QgcmVzOiBSZXNwb25zZSA9IHtcbiAqICAgICBzdGF0dXM6IDIwMCxcbiAqICAgICBib2R5OiAnJyxcbiAqICAgICBoZWFkZXJzOiB7XG4gKiAgICAgICAnQ29udGVudC1UeXBlJzogJ3RleHQvaHRtbCdcbiAqICAgICB9XG4gKiAgIH07XG4gKlxuICogICB0aGlzLndlYlNlcnZlci5zZW5kUmVzcG9uc2UoZGF0YS5yZXF1ZXN0SWQsIHJlcylcbiAqICAgICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqIH0pO1xuICpcbiAqIHRoaXMud2ViU2VydmVyLnN0YXJ0KDgwKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqXG4gKiBAaW50ZXJmYWNlc1xuICogUmVzcG9uc2VcbiAqIFJlcXVlc3RcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdXZWJTZXJ2ZXInLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi13ZWJzZXJ2ZXInLFxuICBwbHVnaW5SZWY6ICd3aW5kb3cud2Vic2VydmVyJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ieWtvZi9jb3Jkb3ZhLXBsdWdpbi13ZWJzZXJ2ZXIuZ2l0JyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ11cbn0pXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBXZWJTZXJ2ZXIgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgc3RhcnQgeW91ciB3ZWJzZXJ2ZXIuXG4gICAqIEBwYXJhbSBwb3J0IHtudW1iZXJ9IFBvcnQgbnVtYmVyIChkZWZhdWx0IHRvIDgwODApXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxuICB9KVxuICBzdGFydChwb3J0PzogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2Qgd2lsbCBzdG9wIHlvdXIgd2Vic2VydmVyLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdG9wKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYW4gb2JzZXJ2YWJsZSB0aGF0IHN0cmVhbXMgSFRUUCByZXF1ZXN0cyB0byBhbiBvYnNlcnZlci5cbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxSZXF1ZXN0Pn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlIHRvIHJlc29sdmUgYXMgYSBSZXF1ZXN0IG9iamVjdFxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICAgIGNsZWFyRnVuY3Rpb246ICdzdG9wJ1xuICB9KVxuICBvblJlcXVlc3QoKTogT2JzZXJ2YWJsZTxSZXF1ZXN0PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGEgcmVzcG9uc2UgdG8gYSByZXF1ZXN0LlxuICAgKiBAcGFyYW0gcmVxdWVzdElkIHtzdHJpbmd9IFJlcXVlc3QgSUQgdG8gcmVzcG9uZCB0b1xuICAgKiBAcGFyYW0gcmVzcG9uc2VPYmplY3Qge1Jlc3BvbnNlfSBSZXNwb25zZSBvYmplY3RcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gc29tZXRoaW5nIGhhcHBlbnNcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2VuZFJlc3BvbnNlKHJlcXVlc3RJZDogc3RyaW5nLCByZXNwb25zZU9iamVjdDogUmVzcG9uc2UpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG59XG4iXX0=